def firewalldconfig_readconf(path='/etc/firewalld/firewalld.conf')
  settings = {}
  ::File.open(path).each do |line|
    if /^(?<key>\w+)=(?<value>.*)/ =~ line
      case key
      when "DefaultZone"
        settings[:default_zone] = value
      when "MinimalMark"
        settings[:minimal_mark] = value.to_i
      when "CleanupOnExit"
        settings[:cleanup_on_exit] = /^(yes|true)/i.match(value) ? true : false
      when "IPv6_rpfilter"
        settings[:ipv6_rpfilter] = /^(yes|true)/i.match(value) ? true : false
      when "Lockdown"
        settings[:lockdown] = /^(yes|true)/i.match(value) ? true : false
      end
    end
  end
  return settings
end

def firewalldconfig_writeconf(conf,path='/etc/firewalld/firewalld.conf')

  if ::File.exists? path
    lines = ::File.open(path).readlines
  else
    lines = ["# Config generated by chef firewalldconf cookbook.\n"]
  end

  options_to_set = {
    'CleanupOnExit' => :cleanup_on_exit,
    'DefaultZone'   => :default_zone,
    'IPv6_rpfilter' => :ipv6_rpfilter,
    'Lockdown'      => :lockdown,
    'MinimalMark'   => :minimal_mark,
  }

  fh = ::File.new("/etc/firewalld/firewalld.conf","w")

  # Go through each config line, writing out overrides
  lines.each do |line|
    if /^(?<key>\w+)=(?<value>.*)/ =~ line
      keysym = options_to_set[ key ]
      if keysym.nil?
        fh.print line
      else
        unless keysym == :done
          if conf[keysym].nil?
            fh.print line
          else
            fh.puts key + "=" + conf[keysym].to_s
          end
          options_to_set[ key ] = :done
        end
      end
    else
      fh.print line
    end
  end

  # Set keys that were not found in config lines.
  options_to_set.each do |key,keysym|
    unless keysym == :done
      fh.puts key + "=" + conf[keysym].to_s
    end
  end

end
